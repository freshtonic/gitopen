#!/usr/bin/env ruby

# Look at  the modified (cached and  uncached) and untracked files  in a
# Git  repo and  open  them in  $EDITOR.  If there  are  no modified  or
# untracked files, open  all of the files that were  touched by the very
# last commit authored by $(git config --get user.email).  Failing that
# just open the files touched by the last commit regardless of who opened
# it.
#
# gitopen is smart enough to ignore binaries.

def editor(files)
  files = remove_binaries(files)
  command = "$EDITOR #{files.map{|f| "'#{f.strip}'"}.join(" ")}"
  exec(command)
end

def remove_binaries(files)
  files.select do |f|
    `file -b #{f}`.strip =~ /text/
  end
end

gitdir = `git rev-parse --git-dir 2> /dev/null`.strip 
if gitdir == "" 
  $stderr.puts "not in a Git repository"
  exit 1
end

# Get the list of modified (staged & unstaged) and untracked files
# In this order: get files added to the index, get modified files not added to index, get new untracked files that aren't ignored.
files = `git diff --name-only --cached --relative . && git diff --name-only --relative . && git ls-files -o --exclude-standard`


if files.length > 0
  editor(files)
else
  # There are no changed or modified files, so open
  # all files in last commit by me.
  latest_commit_by_me = `git log --no-color --pretty=oneline --author=$(git config --get user.email) | head -n1 | awk '{print $1}'`.strip
  if latest_commit_by_me != ""
    files = `git diff-tree #{latest_commit_by_me} --name-only -r`
    file = files[1..-1] # remove the first line as it's just the SHA1 of the commit
    editor(files)
  end
end





